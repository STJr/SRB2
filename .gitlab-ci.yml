variables:
  GIT_STRATEGY: clone
  GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_PATH

default:
  image: git.do.srb2.org:5050/stjr/srb2ci/srb2ci:stable

  cache:
    - key: ccache-$CI_PROJECT_PATH_SLUG-$CI_JOB_NAME_SLUG
      fallback_keys:
        - cache-$CI_PROJECT_PATH_SLUG-$CI_DEFAULT_BRANCH
        - cache-$CI_PROJECT_PATH_SLUG-default
      paths:
        - ccache
        - ccache_statslog

    - key: apt-$CI_JOB_IMAGE
      paths:
        - apt-cache
      unprotect: true

    - key: apk-$CI_JOB_IMAGE
      paths:
        - apk-cache
      unprotect: true

  before_script:
    - - |
         # debconf
         echo -e "\e[0Ksection_start:`date +%s`:debconf[collapsed=true]\r\e[0KSetup debconf's environment"
      - export DEBIAN_FRONTEND="noninteractive"
      - export DEBIAN_PRIORITY="low"
      - export DEBCONF_NONINTERACTIVE_SEEN="true"
      - |
          # debconf
          echo -e "\e[0Ksection_end:`date +%s`:debconf\r\e[0K"
    - - |
          # dpkg_aa
          echo -e "\e[0Ksection_start:`date +%s`:dpkg_aa[collapsed=true]\r\e[0KAdding architectures to dpkg"
      - dpkg --add-architecture i386
      - dpkg --add-architecture amd64
      - dpkg --add-architecture arm64
      - |
          # dpkg_aa
          echo -e "\e[0Ksection_end:`date +%s`:dpkg_aa\r\e[0K"
    - - |
          # apt_conf
          echo -e "\e[0Ksection_start:`date +%s`:apt_conf[collapsed=true]\r\e[0KSetting up APT conf"
      - export APT_CACHE_DIR=`pwd`/apt-cache
      - mkdir --parents --verbose $APT_CACHE_DIR/partial/
      - touch /etc/apt/apt.conf.d/99build
      - |
          # apt.conf
          echo Adding options to apt.conf':'
      - |
          # APT::Install-Recommends
          echo APT::Install-Recommends "false"\;       | tee --append /etc/apt/apt.conf.d/99build
      - |
          # quit
          echo quiet "1"\;                             | tee --append /etc/apt/apt.conf.d/99build
      - |
          # APT::Get::Assume-Yes
          echo APT::Get::Assume-Yes "true"\;           | tee --append /etc/apt/apt.conf.d/99build
      - |
          # Dir::Cache::Archives
          echo Dir::Cache::Archives "$APT_CACHE_DIR"\; | tee --append /etc/apt/apt.conf.d/99build
      - |
          # apt_conf
          echo -e "\e[0Ksection_end:`date +%s`:apt_conf\r\e[0K"
    - - |
          # apt_update
          echo -e "\e[0Ksection_start:`date +%s`:apt_update[collapsed=true]\r\e[0KUpdating APT listing"
      - apt-get update
      - |
          # apt_update
          echo -e "\e[0Ksection_end:`date +%s`:apt_update\r\e[0K"

    - - |
          # apt_pre
          echo -e "\e[0Ksection_start:`date +%s`:apt_pre[collapsed=true]\r\e[0KInstalling pre packages"
      - apt-get install apt-utils
      - |
          # apt_pre
          echo -e "\e[0Ksection_end:`date +%s`:apt_pre\r\e[0K"

    - - |
          # apt_upgrade
          echo -e "\e[0Ksection_start:`date +%s`:apt_upgrade[collapsed=true]\r\e[0KUpdating existing packages"
      - apt-get upgrade
      - |
          # apt_update
          echo -e "\e[0Ksection_end:`date +%s`:apt_upgrade\r\e[0K"

    - - |
          # apt_common
          echo -e "\e[0Ksection_start:`date +%s`:apt_common[collapsed=true]\r\e[0KInstalling common packages"
      - apt-get install make git ccache nasm cmake ca-certificates
      - |
          # apt_common
          echo -e "\e[0Ksection_end:`date +%s`:apt_common\r\e[0K"

    - - |
          # ccache_config
          echo -e "\e[0Ksection_start:`date +%s`:ccache_config[collapsed=true]\r\e[0KSetting up ccache config"
      - mkdir --parents --verbose ~/.ccache/
      - touch ~/.ccache/ccache.conf
      - |
          # cache.conf
          echo Adding ccache configution option
      - |
          # base_dir
          echo base_dir = $PWD                  | tee --append ~/.ccache/ccache.conf
      - |
          # cache_dir
          echo cache_dir = $PWD/ccache          | tee --append ~/.ccache/ccache.conf
      - |
          # compiler_check
          echo compiler_check = content         | tee --append ~/.ccache/ccache.conf
      - |
          # stats_log
          echo stats_log = $PWD/ccache_statslog | tee --append ~/.ccache/ccache.conf
      - |
          # max_size
          echo max_size = 50M                   | tee --append ~/.ccache/ccache.conf
      - |
          # ccache_config
          echo -e "\e[0Ksection_end:`date +%s`:ccache_config\r\e[0K"

    - - |
          # cache_reset
          echo -e "\e[0Ksection_start:`date +%s`:ccache_reset[collapsed=true]\r\e[0KResetting ccache statistics"
      - ccache --zero-stats
      - ccache --show-stats
      - |
          # ccache_reset
          echo -e "\e[0Ksection_end:`date +%s`:ccache_reset\r\e[0K"

  artifacts:
    paths:
      - "bin/"
      - "src/comptime.h"
    name: "$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA-$CI_JOB_NAME_SLUG"

  after_script:
    - - |
           # apt_clean
           echo -e "\e[0Ksection_start:`date +%s`:apt_clean[collapsed=true]\r\e[0KCleaning of unneeded APT packages"
      - apt-get autoclean
      - |
          # apt_clean
          echo -e "\e[0Ksection_end:`date +%s`:apt_clean\r\e[0K"

    - - |
          # ccache_stats
          echo -e "\e[0Ksection_start:`date +%s`:ccache_stats[collapsed=true]\r\e[0Kccache statistics:"
      - ccache --show-stats
      - ccache --show-log-stats || true
      - |
          # ccahe_stats
          echo -e "\e[0Ksection_end:`date +%s`:ccache_stats\r\e[0K"

stages:
  - build

Debian testing GCC:
  stage: build

  when: manual

  image: debian:testing-slim

  allow_failure: true

  artifacts:
    paths:
      - "bin/"
      - "src/comptime.h"
    expose_as: "testing-gcc"
    name: "$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA-testing-gcc"

  variables:
    CC: gcc
    LDFLAGS: -Wl,-fuse-ld=gold

  script:
    - - |
          # apt_toolchain
          echo -e "\e[0Ksection_start:`date +%s`:apt_toolchain[collapsed=true]\r\e[0KInstalling toolchain packages"
      - apt-get install gcc
      - |
          # apt_toolchain
          echo -e "\e[0Ksection_end:`date +%s`:apt_toolchain\r\e[0K"

    - - |
          # apt_development
          echo -e "\e[0Ksection_start:`date +%s`:apt_development[collapsed=true]\r\e[0KInstalling development packages"
      - apt-get install libsdl2-mixer-dev libpng-dev libcurl4-openssl-dev libgme-dev libopenmpt-dev libminiupnpc-dev
      - |
          # apt_development
          echo -e "\e[0Ksection_end:`date +%s`:apt_development\r\e[0K"

    - - |
          # make
          echo -e "\e[0Ksection_start:`date +%s`:make[collapsed=false]\r\e[0KCompiling SRB2"
      - make --directory=src --keep-going CCACHE=1 ERRORMODE=1 NONX86=1 || make --directory=src --keep-going CCACHE=1 ERRORMODE=1 NONX86=1
      - |
          # make
          echo -e "\e[0Ksection_end:`date +%s`:make\r\e[0K"

Windows x86:
  stage: build

  when: on_success

  artifacts:
    paths:
      - "bin/"
      - "src/comptime.h"
    expose_as: "Win32"
    name: "$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA-Win32"

  variables:
    PREFIX: i686-w64-mingw32

  script:
    - - |
          # apt_toolchain
          echo -e "\e[0Ksection_start:`date +%s`:apt_toolchain[collapsed=true]\r\e[0KInstalling toolchain packages"
      - apt-get install gcc-mingw-w64-i686-win32
      - |
          # apt_toolchain
          echo -e "\e[0Ksection_end:`date +%s`:apt_toolchain\r\e[0K"

    - - |
          # make
          echo -e "\e[0Ksection_start:`date +%s`:make[collapsed=false]\r\e[0KCompiling SRB2"
      - make --directory=src --keep-going CCACHE=1 ERRORMODE=1 MINGW=1 SDL=1 || make --directory=src --keep-going CCACHE=1 ERRORMODE=1 MINGW=1 SDL=1
      - |
          # make
          echo -e "\e[0Ksection_end:`date +%s`:make\r\e[0K"

Debian stable:amd64:
  stage: build

  when: on_success

  artifacts:
    paths:
      - "bin/"
      - "src/comptime.h"
    expose_as: "Debian amd64"
    name: "$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA-x86-64"

  variables:
    CC: x86_64-linux-gnu-gcc
    LDFLAGS: -Wl,-fuse-ld=gold
    OBJCOPY: x86_64-linux-gnu-objcopy
    OBJDUMP: x86_64-linux-gnu-objdump
    PKG_CONFIG_PATH: /usr/lib/x86_64-linux-gnu/pkgconfig

  script:
    - - |
          # apt_toolchain
          echo -e "\e[0Ksection_start:`date +%s`:apt_toolchain[collapsed=true]\r\e[0KInstalling toolchain packages"
      - apt-get install gcc-x86-64-linux-gnu || apt-get install gcc
      - |
          # apt_toolchain
          echo -e "\e[0Ksection_end:`date +%s`:apt_toolchain\r\e[0K"

    - - |
          # apt_development
          echo -e "\e[0Ksection_start:`date +%s`:apt_development[collapsed=true]\r\e[0KInstalling development packages"
      - apt-get install libsdl2-mixer-dev:amd64 libpng-dev:amd64 libcurl4-openssl-dev:amd64 libgme-dev:amd64 libopenmpt-dev:amd64 libminiupnpc-dev:amd64
      - |
          # apt_development
          echo -e "\e[0Ksection_end:`date +%s`:apt_development\r\e[0K"

    - - |
          # make
          echo -e "\e[0Ksection_start:`date +%s`:make[collapsed=false]\r\e[0KCompiling SRB2"
      - make --directory=src --keep-going CCACHE=1 ERRORMODE=1 LINUX64=1 || make --directory=src --keep-going CCACHE=1 ERRORMODE=1 LINUX64=1
      - |
          # make
          echo -e "\e[0Ksection_end:`date +%s`:make\r\e[0K"

Debian oldstable:amd64:
  extends: Debian stable:amd64

  when: manual

  image: git.do.srb2.org:5050/stjr/srb2ci/srb2ci:oldstable

  allow_failure: true

  artifacts:
    paths:
      - "bin/"
      - "src/comptime.h"
    expose_as: "Debian old amd64"
    name: "$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA-old-x86-64"

  script:
    - - |
          # apt_toolchain
          echo -e "\e[0Ksection_start:`date +%s`:apt_toolchain[collapsed=true]\r\e[0KInstalling toolchain packages"
      - apt-get install gcc-x86-64-linux-gnu || apt-get install gcc
      - |
          # apt_toolchain
          echo -e "\e[0Ksection_end:`date +%s`:apt_toolchain\r\e[0K"

    - - |
          # apt_development
          echo -e "\e[0Ksection_start:`date +%s`:apt_development[collapsed=true]\r\e[0KInstalling development packages"
      - apt-get install libsdl2-mixer-dev:amd64 libpng-dev:amd64 libcurl4-openssl-dev:amd64 libopenmpt-dev:amd64 libminiupnpc-dev:amd64
      - |
          # apt_development
          echo -e "\e[0Ksection_end:`date +%s`:apt_development\r\e[0K"

    - - |
          # make
          echo -e "\e[0Ksection_start:`date +%s`:make[collapsed=false]\r\e[0KCompiling SRB2"
      - make --directory=src --keep-going CCACHE=1 ERRORMODE=1 LINUX64=1 NOGME=1 || make --directory=src --keep-going CCACHE=1 ERRORMODE=1 LINUX64=1 NOGME=1
      - |
          # make
          echo -e "\e[0Ksection_end:`date +%s`:make\r\e[0K"

Debian stable:i386:
  stage: build

  when: manual

  artifacts:
    paths:
      - "bin/"
      - "src/comptime.h"
    expose_as: "Debian i386"
    name: "$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA-i686"

  variables:
    CC: i686-linux-gnu-gcc
    OBJCOPY: i686-linux-gnu-objcopy
    OBJDUMP: i686-linux-gnu-objdump
    PKG_CONFIG_PATH: /usr/lib/i386-linux-gnu/pkgconfig

  script:
    - - |
          # apt_toolchain
          echo -e "\e[0Ksection_start:`date +%s`:apt_toolchain[collapsed=true]\r\e[0KInstalling toolchain packages"
      - apt-get install gcc-i686-linux-gnu || apt-get install gcc
      - |
          # apt_toolchain
          echo -e "\e[0Ksection_end:`date +%s`:apt_toolchain\r\e[0K"

    - - |
          # apt_development
          echo -e "\e[0Ksection_start:`date +%s`:apt_development[collapsed=true]\r\e[0KInstalling development packages"
      - apt-get install libsdl2-mixer-dev:i386 libpng-dev:i386 libcurl4-openssl-dev:i386 libgme-dev:i386 libopenmpt-dev:i386 libminiupnpc-dev:i386
      - |
          # apt_development
          echo -e "\e[0Ksection_end:`date +%s`:apt_development\r\e[0K"

    - - |
          # make
          echo -e "\e[0Ksection_start:`date +%s`:make[collapsed=false]\r\e[0KCompiling SRB2"
      - make --directory=src --keep-going CCACHE=1 ERRORMODE=1 LINUX=1 || make --directory=src --keep-going CCACHE=1 ERRORMODE=1 LINUX=1
      - |
          # make
          echo -e "\e[0Ksection_end:`date +%s`:make\r\e[0K"

Debian stable:arm64:
  stage: build

  when: manual

  artifacts:
    paths:
      - "bin/"
      - "src/comptime.h"
    expose_as: "Debian arm64"
    name: "$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA-aarch64"

  variables:
    CC: aarch64-linux-gnu-gcc
    LDFLAGS: -Wl,-fuse-ld=gold
    OBJCOPY: aarch64-linux-gnu-objcopy
    OBJDUMP: aarch64-linux-gnu-objdump
    PKG_CONFIG_PATH: /usr/lib/aarch64-linux-gnu/pkgconfig

  script:
    - - |
          # apt_toolchain
          echo -e "\e[0Ksection_start:`date +%s`:apt_toolchain[collapsed=true]\r\e[0KInstalling toolchain packages"
      - apt-get install gcc-aarch64-linux-gnu || apt-get install gcc
      - |
          # apt_toolchain
          echo -e "\e[0Ksection_end:`date +%s`:apt_toolchain\r\e[0K"

    - - |
          # apt_development
          echo -e "\e[0Ksection_start:`date +%s`:apt_development[collapsed=true]\r\e[0KInstalling development packages"
      - apt-get install libsdl2-mixer-dev:arm64 libpng-dev:arm64 libcurl4-openssl-dev:arm64 libgme-dev:arm64 libopenmpt-dev:arm64 libminiupnpc-dev:arm64
      - |
          # apt_development
          echo -e "\e[0Ksection_end:`date +%s`:apt_development\r\e[0K"

    - - |
          # make
          echo -e "\e[0Ksection_start:`date +%s`:make[collapsed=false]\r\e[0KCompiling SRB2"
      - make --directory=src --keep-going CCACHE=1 ERRORMODE=1 LINUX64=1 ERRORMODE=1 NONX86=1 ARM64=1 || make --directory=src --keep-going CCACHE=1 ERRORMODE=1 LINUX64=1 NONX86=1 ARM64=1
      - |
          # make
          echo -e "\e[0Ksection_end:`date +%s`:make\r\e[0K"

Debian oldstable:arm64:
  extends: Debian stable:arm64

  when: manual

  image: git.do.srb2.org:5050/stjr/srb2ci/srb2ci:oldstable

  allow_failure: true

  artifacts:
    paths:
      - "bin/"
      - "src/comptime.h"
    expose_as: "Debian old arm64"
    name: "$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA-old-aarch64"

  script:
    - - |
          # apt_toolchain
          echo -e "\e[0Ksection_start:`date +%s`:apt_toolchain[collapsed=true]\r\e[0KInstalling toolchain packages"
      - apt-get install gcc-aarch64-linux-gnu || apt-get install gcc
      - |
          # apt_toolchain
          echo -e "\e[0Ksection_end:`date +%s`:apt_toolchain\r\e[0K"

    - - |
          # apt_development
          echo -e "\e[0Ksection_start:`date +%s`:apt_development[collapsed=true]\r\e[0KInstalling development packages"
      - apt-get install libsdl2-mixer-dev:arm64 libpng-dev:arm64 libcurl4-openssl-dev:arm64 libopenmpt-dev:arm64 libminiupnpc-dev:arm64
      - |
          # apt_development
          echo -e "\e[0Ksection_end:`date +%s`:apt_development\r\e[0K"

    - - |
          # make
          echo -e "\e[0Ksection_start:`date +%s`:make[collapsed=false]\r\e[0KCompiling SRB2"
      - make --directory=src --keep-going CCACHE=1 ERRORMODE=1 LINUX64=1 ERRORMODE=1 NONX86=1 ARM64=1 NOGME=1 || make --directory=src --keep-going CCACHE=1 ERRORMODE=1 LINUX64=1 NONX86=1 ARM64=1 NOGME=1
      - |
          # make
          echo -e "\e[0Ksection_end:`date +%s`:make\r\e[0K"

batocera:arm64:
  extends: Debian stable:arm64

  when: manual

  allow_failure: true

  artifacts:
    paths:
      - "bin/"
      - "src/comptime.h"
    expose_as: "Debian old arm64"
    name: "$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA-batocera-aarch64"

  script:
    - - |
          # apt_toolchain
          echo -e "\e[0Ksection_start:`date +%s`:apt_toolchain[collapsed=true]\r\e[0KInstalling toolchain packages"
      - apt-get install gcc-aarch64-linux-gnu || apt-get install gcc
      - |
          # apt_toolchain
          echo -e "\e[0Ksection_end:`date +%s`:apt_toolchain\r\e[0K"

    - - |
          # apt_development
          echo -e "\e[0Ksection_start:`date +%s`:apt_development[collapsed=true]\r\e[0KInstalling development packages"
      - apt-get install libsdl2-mixer-dev:arm64 libpng-dev:arm64 libcurl4-openssl-dev:arm64 libopenmpt-dev:arm64 libminiupnpc-dev:arm64
      - |
          # apt_development
          echo -e "\e[0Ksection_end:`date +%s`:apt_development\r\e[0K"

    - - |
          # make
          echo -e "\e[0Ksection_start:`date +%s`:make[collapsed=false]\r\e[0KCompiling SRB2"
      - make --directory=src --keep-going CCACHE=1 ERRORMODE=1 LINUX64=1 ERRORMODE=1 NONX86=1 ARM64=1 NOGME=1 || make --directory=src --keep-going CCACHE=1 ERRORMODE=1 LINUX64=1 NONX86=1 ARM64=1 NOGME=1
      - |
          # make
          echo -e "\e[0Ksection_end:`date +%s`:make\r\e[0K"

Windows x64:
  stage: build

  when: manual

  artifacts:
    paths:
      - "bin/"
      - "src/comptime.h"
    expose_as: "Win64"
    name: "$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA-Win64"

  variables:
    PREFIX: x86_64-w64-mingw32

  script:
    - - |
          # apt_toolchain
          echo -e "\e[0Ksection_start:`date +%s`:apt_toolchain[collapsed=true]\r\e[0KInstalling toolchain packages"
      - apt-get install gcc-mingw-w64-x86-64-win32
      - |
          # apt_toolchain
          echo -e "\e[0Ksection_end:`date +%s`:apt_toolchain\r\e[0K"

    - - |
          # make
          echo -e "\e[0Ksection_start:`date +%s`:make[collapsed=false]\r\e[0KCompiling SRB2"
      - make --directory=src --keep-going CCACHE=1 ERRORMODE=1 MINGW64=1 SDL=1 || make --directory=src --keep-going CCACHE=1 ERRORMODE=1 MINGW64=1 SDL=1
      - |
          # make
          echo -e "\e[0Ksection_end:`date +%s`:make\r\e[0K"

Debian stable Clang:
  stage: build

  when: on_success

  allow_failure: false

  artifacts:
    paths:
      - "build.clang/bin/"
      - "build.clang/src/config.h"
    expose_as: "clang"
    name: "$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA-clang"

  variables:
    CC: clang
    CXX: clang
    WFLAGS: -Wno-cast-align -Wno-implicit-const-int-float-conversion -Werror
    CFLAGS: -Wno-cast-align -Wno-implicit-const-int-float-conversion -Werror
    LDFLAGS: -Wl,-fuse-ld=gold

  script:
    - - |
          # apt_toolchain
          echo -e "\e[0Ksection_start:`date +%s`:apt_toolchain[collapsed=true]\r\e[0KInstalling toolchain packages"
      - apt-get install clang
      - |
          # apt_toolchain
          echo -e "\e[0Ksection_end:`date +%s`:apt_toolchain\r\e[0K"

    - - |
          # apt_development
          echo -e "\e[0Ksection_start:`date +%s`:apt_development[collapsed=true]\r\e[0KInstalling development packages"
      - apt-get install libsdl2-mixer-dev libpng-dev libcurl4-openssl-dev libgme-dev libopenmpt-dev libminiupnpc-dev
      - |
          # apt_development
          echo -e "\e[0Ksection_end:`date +%s`:apt_development\r\e[0K"

    - - |
          # cmake
          echo -e "\e[0Ksection_start:`date +%s`:cmake[collapsed=false]\r\e[0KBuilding Makefiles"
      - cmake -B build.clang -DCPM_USE_LOCAL_PACKAGES:BOOL=ON -DSRB2_CONFIG_ENABLE_TESTS:BOOL=OFF -DSRB2_CONFIG_SYSTEM_LIBRARIES:BOOL=ON -DSRB2_USE_LIBGME:BOOL=OFF -G "Unix Makefiles"
      - |
          # cmake
          echo -e "\e[0Ksection_end:`date +%s`:cmake\r\e[0K"

    - - |
          # make
          echo -e "\e[0Ksection_start:`date +%s`:make[collapsed=false]\r\e[0KCompiling SRB2"
      - make --directory=build.clang --keep-going || make --directory=build.clang --keep-going
      - |
          # make
          echo -e "\e[0Ksection_end:`date +%s`:make\r\e[0K"

Debian testing Clang:
  extends: Debian stable Clang

  when: manual

  allow_failure: true

  image: debian:testing-slim

  artifacts:
    paths:
      - "build.clang/bin/"
      - "build.clang/src/config.h"
    expose_as: "testing-clang"
    name: "$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA-testing-clang"

  variables:
    CC: clang
    CXX: clang
    WFLAGS: -Wno-cast-align -Wno-implicit-const-int-float-conversion -Werror -Wno-deprecated-non-prototype -Wno-single-bit-bitfield-constant-conversion
    CFLAGS: -Wno-cast-align -Wno-implicit-const-int-float-conversion -Werror -Wno-deprecated-non-prototype -Wno-single-bit-bitfield-constant-conversion
    LDFLAGS: -Wl,-fuse-ld=gold

Alpine 3 GCC:
  stage: build

  when: on_success

  image: alpine:3

  allow_failure: true

  artifacts:
    paths:
      - "bin/"
      - "src/comptime.h"
    expose_as: "Apline-3"
    name: "$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA-Apline-3"

  before_script:
    - - |
          # apk_cache
          echo -e "\e[0Ksection_start:`date +%s`:apk_cache[collapsed=true]\r\e[0KUpdating APK listing"
      - export APK_CACHE_DIR=`pwd`/apk-cache
      - mkdir --parents --verbose $APK_CACHE_DIR/
      - ln -sf /etc/apk/cache $APK_CACHE_DIR
      - |
          # apk_cache
          echo -e "\e[0Ksection_end:`date +%s`:apk_cache\r\e[0K"

    - - |
          # apk_update
          echo -e "\e[0Ksection_start:`date +%s`:apk_update[collapsed=true]\r\e[0KUpdating APK listing"
      - apk update
      - |
          # apk_update
          echo -e "\e[0Ksection_end:`date +%s`:apk_update\r\e[0K"

    - - |
          # apk_upgrade
          echo -e "\e[0Ksection_start:`date +%s`:apk_upgrade[collapsed=true]\r\e[0KUpdating existing packages"
      - apk upgrade
      - |
          # apk_update
          echo -e "\e[0Ksection_end:`date +%s`:apk_upgrade\r\e[0K"

    - - |
          # apk_common
          echo -e "\e[0Ksection_start:`date +%s`:apk_common[collapsed=true]\r\e[0KInstalling common packages"
      - apk add make git ccache nasm
      - |
          # apk_common
          echo -e "\e[0Ksection_end:`date +%s`:apk_common\r\e[0K"

    - - |
          # ccache_config
          echo -e "\e[0Ksection_start:`date +%s`:ccache_config[collapsed=true]\r\e[0KSetting up ccache config"
      - mkdir --parents --verbose ~/.ccache/
      - touch ~/.ccache/ccache.conf
      - |
          # cache.conf
          echo Adding ccache configution option
      - |
          # base_dir
          echo base_dir = $PWD                  | tee -a ~/.ccache/ccache.conf
      - |
          # cache_dir
          echo cache_dir = $PWD/ccache          | tee -a ~/.ccache/ccache.conf
      - |
          # compiler_check
          echo compiler_check = content         | tee -a ~/.ccache/ccache.conf
      - |
          # stats_log
          echo stats_log = $PWD/ccache_statslog | tee -a ~/.ccache/ccache.conf
      - |
          # max_size
          echo max_size = 50M                   | tee -a ~/.ccache/ccache.conf
      - |
          # ccache_config
          echo -e "\e[0Ksection_end:`date +%s`:ccache_config\r\e[0K"

    - - |
          # cache_reset
          echo -e "\e[0Ksection_start:`date +%s`:ccache_reset[collapsed=true]\r\e[0KResetting ccache statistics"
      - ccache --zero-stats
      - ccache --show-stats
      - |
          # ccache_reset
          echo -e "\e[0Ksection_end:`date +%s`:ccache_reset\r\e[0K"

  script:
    - - |
          # apk_toolchain
          echo -e "\e[0Ksection_start:`date +%s`:apk_toolchain[collapsed=true]\r\e[0KInstalling toolchain packages"
      - apk add gcc
      - |
          # apk_toolchain
          echo -e "\e[0Ksection_end:`date +%s`:apk_toolchain\r\e[0K"

    - - |
          # apk_development
          echo -e "\e[0Ksection_start:`date +%s`:apk_development[collapsed=true]\r\e[0KInstalling development packages"
      - apk add musl-dev sdl2_mixer-dev libpng-dev curl-dev libgme-dev libopenmpt-dev miniupnpc-dev
      - |
          # apk_development
          echo -e "\e[0Ksection_end:`date +%s`:apk_development\r\e[0K"

    - - |
          # make
          echo -e "\e[0Ksection_start:`date +%s`:make[collapsed=false]\r\e[0KCompiling SRB2"
      - make --directory=src --keep-going CCACHE=1 ERRORMODE=1 NONX86=1 NOEXECINFO=1 || make --directory=src --keep-going CCACHE=1 ERRORMODE=1 NONX86=1 NOEXECINFO=1
      - |
          # make
          echo -e "\e[0Ksection_end:`date +%s`:make\r\e[0K"

  after_script:
    - - |
           # apk_clean
           echo -e "\e[0Ksection_start:`date +%s`:apk_clean[collapsed=true]\r\e[0KCleaning of unneeded APK packages"
      - apk cache clean
      - |
          # apk_clean
          echo -e "\e[0Ksection_end:`date +%s`:apk_clean\r\e[0K"

    - - |
          # ccache_stats
          echo -e "\e[0Ksection_start:`date +%s`:ccache_stats[collapsed=true]\r\e[0Kccache statistics:"
      - ccache --show-stats --verbose
      - ccache --show-log-stats --verbose
      - |
          # ccahe_stats
          echo -e "\e[0Ksection_end:`date +%s`:ccache_stats\r\e[0K"

Alpine 3 GCC Dedicated:
  extends: Alpine 3 GCC

  artifacts:
    paths:
      - "bin/"
      - "src/comptime.h"
    expose_as: "Apline-3-Dedicated"
    name: "$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA-Apline-3-Dedicated"

  script:
    - - |
          # apk_toolchain
          echo -e "\e[0Ksection_start:`date +%s`:apk_toolchain[collapsed=true]\r\e[0KInstalling toolchain packages"
      - apk add gcc
      - |
          # apk_toolchain
          echo -e "\e[0Ksection_end:`date +%s`:apk_toolchain\r\e[0K"

    - - |
          # apk_development
          echo -e "\e[0Ksection_start:`date +%s`:apk_development[collapsed=true]\r\e[0KInstalling development packages"
      - apk add musl-dev libpng-dev curl-dev
      - |
          # apk_development
          echo -e "\e[0Ksection_end:`date +%s`:apk_development\r\e[0K"

    - - |
          # make
          echo -e "\e[0Ksection_start:`date +%s`:make[collapsed=false]\r\e[0KCompiling SRB2"
      - make --directory=src --keep-going CCACHE=1 ERRORMODE=1 NONX86=1 NOEXECINFO=1 DEDICATED=1 || make --directory=src --keep-going CCACHE=1 ERRORMODE=1 NONX86=1 NOEXECINFO=1 DEDICATED=1
      - |
          # make
          echo -e "\e[0Ksection_end:`date +%s`:make\r\e[0K"

osxcross x86_64:
  stage: build

  artifacts:
    paths:
      - "build.osxcross/bin/"
      - "build.osxcross/src/config.h"
    expose_as: "Mac x86_64"
    name: "$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA-clang"

  variables:
    OSXCROSS_HOST: x86_64-apple-darwin21.4
    LD: x86_64-apple-darwin21.4-ld

  script:
    - - |
          # apt_development
          echo -e "\e[0Ksection_start:`date +%s`:macports_development[collapsed=true]\r\e[0KInstalling development packages"
      - osxcross-macports install curl libopenmpt libsdl2_mixer
      - |
          # apt_development
          echo -e "\e[0Ksection_end:`date +%s`:macports_development\r\e[0K"

    - - |
          # make
          echo -e "\e[0Ksection_start:`date +%s`:make[collapsed=false]\r\e[0KBuilding Makefiles"
      - cmake -B build.osxcross --toolchain /osxcross/toolchain.cmake -DCPM_USE_LOCAL_PACKAGES:BOOL=ON -DOPENMPT_INCLUDE_DIR:PATH="/osxcross/macports/pkgs/opt/local/include" -DSDL2_INCLUDE_DIR:PATH="/osxcross/macports/pkgs/opt/local/lib" -DSRB2_CONFIG_ENABLE_TESTS:BOOL=OFF -DSRB2_CONFIG_SYSTEM_LIBRARIES:BOOL=ON -DSRB2_CONFIG_USE_GME:BOOL=OFF -G "Unix Makefiles"
      - |
          # make
          echo -e "\e[0Ksection_end:`date +%s`:make\r\e[0K"

    - - |
          # make
          echo -e "\e[0Ksection_start:`date +%s`:make[collapsed=false]\r\e[0KCompiling SRB2"
      - make --directory=build.osxcross --keep-going || make --directory=build.osxcross --keep-going
      - |
          # make
          echo -e "\e[0Ksection_end:`date +%s`:make\r\e[0K"

osxcross arm64:
  stage: build

  when: manual

  allow_failure: true

  artifacts:
    paths:
      - "build.osxcross/bin/"
      - "build.osxcross/src/config.h"
    expose_as: "Mac arm64"
    name: "$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA-clang"

  variables:
    OSXCROSS_HOST: arm64-apple-darwin21.4
    LD: arm64-apple-darwin21.4-ld

  script:
    - - |
          # apt_development
          echo -e "\e[0Ksection_start:`date +%s`:macports_development[collapsed=true]\r\e[0KInstalling development packages"
      - osxcross-macports install --arm64 curl libopenmpt libsdl2_mixer
      - |
          # apt_development
          echo -e "\e[0Ksection_end:`date +%s`:macports_development\r\e[0K"

    - - |
          # make
          echo -e "\e[0Ksection_start:`date +%s`:make[collapsed=false]\r\e[0KBuilding Makefiles"
      - cmake -B build.osxcross --toolchain /osxcross/toolchain.cmake -DCPM_USE_LOCAL_PACKAGES:BOOL=ON -DOPENMPT_INCLUDE_DIR:PATH="/osxcross/macports/pkgs/opt/local/include" -DSDL2_INCLUDE_DIR:PATH="/osxcross/macports/pkgs/opt/local/lib" -DSRB2_CONFIG_ENABLE_TESTS:BOOL=OFF -DSRB2_CONFIG_SYSTEM_LIBRARIES:BOOL=ON -DSRB2_CONFIG_USE_GME:BOOL=OFF -G "Unix Makefiles"
      - |
          # make
          echo -e "\e[0Ksection_end:`date +%s`:make\r\e[0K"

    - - |
          # make
          echo -e "\e[0Ksection_start:`date +%s`:make[collapsed=false]\r\e[0KCompiling SRB2"
      - make --directory=build.osxcross --keep-going || make --directory=build.osxcross --keep-going
      - |
          # make
          echo -e "\e[0Ksection_end:`date +%s`:make\r\e[0K"
